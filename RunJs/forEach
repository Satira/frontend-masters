// Lets say we need a function that returns a object and we have a lsit that need to be converted in a list of objects
// Before ES6
function createSuspectsObject(name) {
  return {
    name: name,
    color: name.split(' ')[1],
    speak: function () {
      consoloe.log("My name is ", name);
    }
  }
}

// ES6 way for declaring methods() inside an object
function createSuspectsObject2(name) {
  return {
    name: name,
    color: name.split(' ')[1],
    speak() {
      consoloe.log("My name is ", name);
    }
  }
}

var suspects = ['Miss. Scarlet', 'Colonel Mustard', 'Mr. White'];

var suspectList = [];

// With "for loop"
for(let i = 0; i < suspects.length; i++) {
  let suspect = createSuspectsObject2(suspects[i]);
  suspectList.push(suspect);
  //or
  suspectList.push(createSuspectsObject2(suspects[i]));
}

// forEach
suspects.forEach((suspect) => {
  suspectList.push(createSuspectsObject2(suspect));
});

// Lest recreate Underscore.js "_.each" function from scratch:
const _ = {};
_.each = function(list, callback) {
  //It's going to work on arrays and objects so we need to know what we have
  if(Array.isArray(list)) { //true
      for(let i = 0; i < list.length; i++) {
        //call a callback with list item
        callback(list[i], i, list);
    }
  } else { //object
      for (var key in list) {
        callback(list[key], key, list);
    }
  }
};

// So lets use it
_.each(['Sally', 'George', 'Mama'], (name, i, list) => {
    if(list[i + 1]) {
      console.log(name, " is younger than ", list[i + 1])
    } else {
      console.log(name, " is the oldest"); 
    }
});
